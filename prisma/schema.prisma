// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String    @id @default(uuid())
  firstName    String
  lastName     String?
  userName     String    @unique
  email        String    @unique
  // password     String
  loginSecret  String?
  bio          String?
  profilePhoto String?
  groups       Group[]
  feeds        Feed[]
  likes        Like[]
  comments     Comment[]
  followers    User[]    @relation("FollowRelation", references: [id])
  followings   User[]    @relation("FollowRelation", references: [id])
  rooms        Room[]
  messages     Message[]
  point        Int       @default(0)
  items        Item[]
  avatar       Avatar?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Group {
  id              String           @id @default(uuid())
  adminId         String
  managerId       String[]
  title           String           @unique
  bio             String?
  groupPhoto      String?
  open            Boolean
  codes           Code[]
  hashtags        Hashtag[]
  users           User[]
  items           Item[]
  theme           String?
  objectPositions ObjectPosition[]
  feeds           Feed[]
  // level Int
  // expPoint Int
  // maxEntrant Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model ObjectPosition {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  objectId  String // avatar의 경우 user의 id
  owner     String // user
  type      String
  //x         Int      @default(-1)
  //y         Int      @default(-1)
  grid      Int      @default(-1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hashtag {
  id        String   @id @default(uuid())
  hashtag   String   @unique
  groups    Group[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Code {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  userId    String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // 한 유저에 대해 여러번 초대코드를 보낼 수 없도록.

  @@unique([groupId, userId])
}

model Feed {
  id            String    @id @default(uuid())
  // 실제 DB에 저장되지 않음 relatin으로 참조 하는거지.
  // userId를 DB에 저장함.
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  // 그룹과의 연결을 끊을 수 있도록 not required But upload할 때는 꼭 필요하게 해야함.
  group         Group?    @relation(fields: [groupId], references: [id])
  groupId       String?
  file          String?
  title         String
  caption       String?
  likes         Like[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  disappearTime String?
}

model Like {
  id        Int      @id @default(autoincrement())
  feed      Feed     @relation(fields: [feedId], references: [id])
  feedId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // 한 Feed에 여러번 Like할 수 없도록 복함 유니크 설정

  @@unique([feedId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  feed      Feed     @relation(fields: [feedId], references: [id])
  feedId    String
  payload   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemInfo {
  id        String   @id @default(uuid())
  itemName  String   @unique
  cost      Int
  info      String?
  file      String
  type      Type     @relation(fields: [typeId], references: [type])
  typeId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Kategorie {
  kategorie String   @id
  types     Type[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Type {
  type        String     @id
  kategorie   Kategorie  @relation(fields: [kategorieId], references: [kategorie])
  kategorieId String
  itemInfos   ItemInfo[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Item {
  // itemInfo의 id 참조
  id         String   @id @default(uuid())
  itemInfoId String
  count      Int      @default(0)
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  groups     Group[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Avatar {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  color     String
  headUrl   String?
  headId    String?
  bodyUrl   String?
  bodyId    String?
  legUrl    String?
  legId     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, createdAt])
}

model Room {
  id        String    @id @default(uuid())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        Int      @id @default(autoincrement())
  payload   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
